function itemQuantityChange(ths) {
    /* Смена количества товара из выпадающего списка*/
    var ri = (ths.parentElement.parentElement.rowIndex - 1);
    var str1 = "order.OrderItems[" + ri + "].CancelReasonId";
    var str2 = "order.OrderItems[" + ri + "].CancelReasonDescr";
    var str3 = "order.OrderItems[" + ri + "].ItemOpenParams";
    var str4 = "order.OrderItems[" + ri + "].Quantity";
    var str5 = "order.OrderItems[" + ri + "].Changed";
    var changed = ths.parentElement.parentElement.cells[0].children[str5].value;
    var op = ths.parentElement.parentElement.cells[0].children[str3].value.split(';');
    ths.parentElement.parentElement.cells[0].children[str4].value = ths.value;
    itemCancelReasonIdInput = ths.parentElement.parentElement.cells[0].children[str1];
    itemCancelReasonDescrInput = ths.parentElement.parentElement.cells[0].children[str2];
    if ((changed == 1 || op[0] - ths.value > 0) && ths.value == 0)
        ths.parentElement.parentElement.style.backgroundColor = 'rgba(200, 0, 0, 0.25)';
    if ((changed == 1 || op[0] - ths.value > 0) && ths.value != 0)
        ths.parentElement.parentElement.style.backgroundColor = 'rgba(255, 255, 128, 0.75)';
    if (op[0] != ths.value)
        showmodal('itemPartialCancelReasons');
    else {
        itemCancelReasonIdInput.value = op[1];
        itemCancelReasonDescrInput.value = op[2];
        document.getElementById('btn_model_upd').click();
    }
}

function itemPartialReasonChange(ths) {
    /* Если количество было изменено, а поле причины пустое, то показываем список причин отмен */
    var ri = (ths.parentElement.rowIndex - 1);
    var str1 = "order.OrderItems[" + ri + "].CancelReasonId";
    var str2 = "order.OrderItems[" + ri + "].CancelReasonDescr";
    var str3 = "order.OrderItems[" + ri + "].ItemOpenParams";
    var str4 = "order.OrderItems[" + ri + "].QuantitySelect";
    var op = ths.parentElement.cells[0].children[str3].value.split(';');
    itemCancelReasonIdInput = ths.parentElement.cells[0].children[str1];
    itemCancelReasonDescrInput = ths.parentElement.cells[0].children[str2];
    if (op[0] != ths.parentElement.cells[3].children[str4].value /* items.Quantity */ && ths.innerText == '')
        showmodal('itemPartialCancelReasons');
}

function setItemCancelPartialReason(reasonId, reasonDescr) {
    /* Запись кода причины отмены товара и описания причины в соответсвующие поля */
    itemCancelReasonIdInput.value = reasonId;
    itemCancelReasonDescrInput.value = reasonDescr;
    document.getElementById("lb_modal").click();
    document.getElementById('btn_model_upd').click();
}

function colorizeItemsTable() {
    /* Раскрашивание таблицы товаров если были изменения количества */
    var rows = document.getElementById('itemsTable').rows;
    for (var i = 1; i < rows.length; i++) {
        var changed = rows[i].cells[0].children[("order.OrderItems[" + (i - 1) + "].Changed")].value;
        var quantity = rows[i].cells[0].children[("order.OrderItems[" + (i - 1) + "].Quantity")].value;  // items.Quantity
        var openQuantity = rows[i].cells[0].children[("order.OrderItems[" + (i - 1) + "].ItemOpenParams")].value.split(';')[0];
        if ((changed == 1 || openQuantity - quantity > 0) && quantity == 0)
            rows[i].style.backgroundColor = 'rgba(200, 0, 0, 0.25)';
        if ((changed == 1 || openQuantity - quantity > 0) && quantity != 0)
            rows[i].style.backgroundColor = 'rgba(255, 255, 128, 0.75)';
    }
}

function onImageClick() {
    /* Щелчёк на картинке товара*/
    if (selectedItem.rowIndex > 0) {
        var str = "order.OrderItems[" + (selectedItem.rowIndex - 1) + "].Url";
        var strCSCU = "order.OrderItems[" + (selectedItem.rowIndex - 1) + "].CSKU";
        var strDescr = "order.OrderItems[" + (selectedItem.rowIndex - 1) + "].Description";
        var urlarray = selectedItem.children[0].children[str].value.split(',');
        var itemOnePhoto = document.getElementById('itemOnePhoto');
        selectedItemPhotoIndex += 1;
        if (selectedItemPhotoIndex > urlarray.length || urlarray[selectedItemPhotoIndex] == '')
            selectedItemPhotoIndex = 0;
        itemOnePhoto.innerHTML = '<image onclick="onImageClick()" src="' + urlarray[selectedItemPhotoIndex] +
            '" alt="" style="width:auto; height:auto;  max-height: calc(100% - 4px); max-weight: 194px; margin: 0; padding: 0;"' +
            'title="' + selectedItem.cells[0].children[strCSCU].value + ' ' + selectedItem.cells[0].children[strDescr].value +
            '\n' + urlarray[selectedItemPhotoIndex] + '"/>';
    }
}

function itemsQuantityChangeEmbargo() {
    /* Запрет на изменение количества в таблице товаров */
    let rows = document.getElementById('itemsTable').rows;
    let confirm = document.getElementById("order.OrderForm").value;
    if (!(confirm == "frmConfirm" && document.getElementById("order.PartialCancelReasons").value != ''))
        for (var i = 1; i < rows.length; i++) {
            rows[i].cells[3].children[("order.OrderItems[" + (i - 1) + "].QuantitySelect")].disabled = true;
        }
}

function getListPickPointHistory() {
    /* Получение информации о статусе заказа в ПВЗ*/
    try {
        ship = document.getElementById("shippingAgent");
        $.ajax({
            url: '/Order/GetListPickPointHistory',
            data: {
                orderNo: document.getElementById('order.OrderNo').value,
                host: document.getElementById('order.Host').value
            },
            type: 'POST',
            success: function (data) {
                document.getElementById('orderComments').style.width = '100%';
                document.getElementById('pickPointState').hidden = true;
                if (data != null && data != '') {
                    document.getElementById('pickPointState').innerHTML = data;
                    if (document.getElementById("pickPointHistoryTable").rows.length > 1) {
                        document.getElementById('pickPointState').hidden = false;
                        document.getElementById('orderComments').style.width = '70%';
                        document.getElementById('pickPointState').style.width = '30%';
                        document.getElementById('pickPointState').scrollTop = document.getElementById('pickPointState').scrollHeight;
                    }                                        
                }

            },
            error: function () { alert('Не удалось получить информацию о статусе заказа в пункте выдачи'); $("#loading").hide(); }
        });
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
    }
}


function outletGetList() {
    /* Получение списка ПВЗ */
    try {
        $.ajax({
            url: '/Order/OutletGetList',
            data: {
                currentUser: document.getElementById("order.CurrentUser").value,
                orderNo: document.getElementById("order.OrderNo").value,
                host: document.getElementById("order.Host").value,
                shipService: document.getElementById("order.Shipping.ShippingService").value
            },
            type: 'POST',
            success: function (data) {
                document.getElementById("outletListHidden").innerHTML = data;
                isAgentAreOutlet();
            },
            error: function () { alert('Не удалось получить список доступных ПВЗ'); $("#loading").hide(); }
        });
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
    }
}

function getNameAndPriceOfAgent(shipservice, postamatId = "") {
    /* Щелчек на пункте меню выбора ПВЗ, а также при выборе постамата из списка*/
    try {
        $.ajax({
            url: '/Order/GetPriceAndDescriptionOnAgent',
            data: {
                orderNo: document.getElementById("order.OrderNo").value,
                host: document.getElementById("order.Host").value,
                shipService: shipservice,
                postamatId: postamatId
            },
            type: 'POST',
            success: function (data) {
                clearShippingDates();
                var json = JSON.parse(data);
                var ar = json.ShipDescrPrice;                 
                if (ar && ar.length > 0) selectShipAgent(shipservice, ar[0].AgentDescr, 0, ar[0].Price);
                dragWidget.classList.remove("dragWidget--active");
            },
            error: function () { alert('Не удалось получить информацию об агенте доставки'); $("#loading").hide(); }
        });
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
    }
}


function isAgentAreOutlet() {
/* Проверка является ли текущий агент нашим ПВЗ и соответственно подсвечиваем кнопку или нет */
    let res = 0;
    let itmOutlet = document.getElementById("outletListMenu").children[0].children;
    let curAgent = document.getElementById("order.Shipping.ShippingService").value;
    for (let i = 0; i < itmOutlet.length; i++) {
        if (curAgent == itmOutlet[i].children[0].innerText) {
            document.getElementById("outletButton").classList.add("orderButtonPushed");
            res = 1;
        }
    }
    return res;
}

function getRingsOnOrder() {
    showmodal('ringsOnOrder');
}

function lb_modalChange() {
    /* при закрытии модального окна прекращаем проигрывание аудио */
    document.getElementById('callAudio').src = "";
}

function customerGetData(customerId, host, currentUser) {
    /* загрузка данных по клиенту */
    try {
        $.ajax({
            url: '/Order/CustomerGetData',
            data: {
                customerId: customerId, host: host, currentUser: currentUser
            },
            type: 'POST',
            success: function (data) {
                //navigator.clipboard.writeText(data);
                var json = JSON.parse(data);
                if (json) {
                    document.getElementById("order.Customer.Name").value = json.CustomerData[0].Name;
                    document.getElementById("order.Customer.Surname").value = json.CustomerData[0].Surname;
                    document.getElementById("order.Customer.Phone").value = json.CustomerData[0].CallOCallMobile;
                    document.getElementById("order.Customer.Email").value = json.CustomerData[0].Email;
                    document.getElementById("customer.CallLine").value = json.CustomerData[0].CallLine;
                    document.getElementById("customer.NotToSDEK").checked = json.CustomerData[0].NotToSDEK;
                    document.getElementById("customer.AutoShipping").checked = json.CustomerData[0].AutoShipping;
                    document.getElementById("customer.PromoCall").checked = json.CustomerData[0].PromoCall;
                    document.getElementById("customer.Upsell").checked = json.CustomerData[0].Upsell;
                    document.getElementById("customer.NotToRobot").checked = json.CustomerData[0].NotToRobot;                    
                    document.getElementById("customer.Birthday").value = dateFormat(json.CustomerData[0].Birthday, "yyyy-mm-dd");
                    document.getElementById("customer.Gender").value = json.CustomerData[0].Sex;
                    document.getElementById("customer.FirstOrder").innerText = dateFormat(json.CustomerData[0].FirstOrderDate, "yyyy-mm-dd HH:MM");
                    var list = document.getElementById("customer.Region");
                    var item = document.createElement('option');
                    for (var i = 0; i < json.CustomerData1.length; i++) {
                        item.text = json.CustomerData1[i].RegionName;
                        item.value = json.CustomerData1[i].RegionId;
                        list.appendChild(item.cloneNode(true));
                    }
                    list.value = json.CustomerData[0].Region;
                    list = document.getElementById("customer.PrefContact");
                    item.text = "";
                    item.value = 0;
                    list.appendChild(item.cloneNode(true));
                    for (var i = 0; i < json.CustomerData2.length; i++) {
                        item.text = json.CustomerData2[i].PrefContactName;
                        item.value = json.CustomerData2[i].PrefContactId;
                        list.appendChild(item.cloneNode(true));
                    }
                    list.value = json.CustomerData[0].PrefContact;
                    if (json.CustomerData[0].PersManager > 0) {
                        list = document.getElementById("customer.PersManager");
                        for (var i = 0; i < json.CustomerData4.length; i++) {
                            item.text = json.CustomerData4[i].Operator;
                            item.value = json.CustomerData4[i].id;
                            list.appendChild(item.cloneNode(true));
                        }
                        list.value = json.CustomerData[0].PersManager
                    }
                    else document.getElementById("customer.ManagerLine").hidden = true;
                    var title = "";
                    document.getElementById("customer.Segment").innerText = json.CustomerData[0].Segment;
                    for (var i = 0; i < json.CustomerData3.length; i++) {
                        title += json.CustomerData3[i].Date + json.CustomerData3[i].Change + " \n";
                    }
                    document.getElementById("customer.Segment").title = title;
                    document.getElementById("customer.MaxOrderAmount").innerText = json.CustomerData[0].MaxOrderAmount;
                    document.getElementById("customer.Buyout").innerText = json.CustomerData[0].Vikup;
                    if (document.getElementById("order.OrderNo"))
                        var orderNo = document.getElementById("order.OrderNo").value;
                    var menuList = document.getElementById("customerRequests");
                    var menuItem = document.createElement("li");
                    menuItem.classList.add("event-menu__item");
                    for (var i = 0; i < json.CustomerData5.length; i++) {
                        if (json.CustomerData5[i].CaseName.indexOf(orderNo) != -1 || orderNo == null) {
                            menuItem.innerText = json.CustomerData5[i].CaseName;
                            menuList.appendChild(menuItem.cloneNode(true));
                        }
                    }
                    var accList0 = document.getElementById("anotherAccounts0List");
                    var accList1 = document.getElementById("anotherAccounts1List");
                    var accList2 = document.getElementById("anotherAccounts2List");
                    for (var i = 0; i < json.CustomerData7.length; i++) {
                        menuItem.innerText = json.CustomerData7[i].CustomerDescription;
                        switch (json.CustomerData7[i].TypeClientCard) {
                            case 0: accList0.appendChild(menuItem.cloneNode(true)); break;
                            case 1: accList1.appendChild(menuItem.cloneNode(true)); break;
                            case 2: accList2.appendChild(menuItem.cloneNode(true)); break;
                        }
                    }
                    menuList = document.getElementById("customerPhones");
                    for (var i = 0; i < json.CustomerData9.length; i++) {
                        menuItem.innerText = json.CustomerData9[i].Phone;
                        menuList.appendChild(menuItem.cloneNode(true));
                    }
                }
            },
            error: function () { alert('Не удалось получить информацию о клиенте'); $("#loading").hide(); }
        });
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
    }
}

function orderActionsMenuSettings() {
    /* Щелчёк на кнопке "действия" проводим действия с этим меню */
    var menuList = document.getElementById("customerRequests");
    var accList0 = document.getElementById("anotherAccounts0List");
    var accList1 = document.getElementById("anotherAccounts1List");
    var accList2 = document.getElementById("anotherAccounts2List");
    menuList.style.maxWidth = Math.floor(window.innerWidth * 0.9) + "px";
    menuList.style.minWidth = Math.floor(window.innerWidth * 0.7) + "px";
    accList0.style.minWidth = Math.floor(window.innerWidth * 0.3) + "px";
    accList1.style.minWidth = Math.floor(window.innerWidth * 0.3) + "px";
    accList2.style.minWidth = Math.floor(window.innerWidth * 0.3) + "px";
    if (document.getElementById("anotherAccounts0List").children.length == 0)
        document.getElementById("anotherAccounts0").style.display = "none";
    if (document.getElementById("anotherAccounts1List").children.length == 0)
        document.getElementById("anotherAccounts1").style.display = "none";
    if (document.getElementById("anotherAccounts2List").children.length == 0)
        document.getElementById("anotherAccounts2").style.display = "none";
}

function findOrderOnKeyPress(evnt) {
    /* при нажатии Энтер выделяем строку с найденным заказом и прокуричваем таблицу */ 
    if (evnt.keyCode == 13) {
        var rows = document.getElementById("customerOrdersTable").rows;
        var offset = 0;
        for (var i = 1; i < rows.length; i++) {
            rows[i].classList.remove('active');
            hideOnFilter(rows[i], rows[i].cells.orderCanChange.innerText);
            if (rows[i].cells.customerOrdersOrderNo.innerText == evnt.srcElement.value) {
                setSingleRowSelect(rows[i]);
                offset = rows[i].offsetTop - (rows[i].offsetTop - rows[i - 1].offsetTop);
            }
        }
        document.getElementById("customerOrdersDiv").scrollTop = offset;
    }
}

function hideOnFilter(obj, str, l) {
    /* прячем строку таблицы если не удовлетворяет условиям выбранных чекбоксов */
    if ((cbx_opened.checked && (str == '1')) ||
        (cbx_inwork.checked && (str == '2' || str == '4')) ||
        (cbx_closed.checked && (str == '3' || str == '5'))) {
        obj.hidden = false;
        l++;
    }
    else obj.hidden = true;
    return l;
}

function applyFilter() {
/* применение фильтра по строкам таблицы заказов в зависимости от выбранных чекбоксов */
    try {
        var rows = document.getElementById("customerOrdersTable").rows;
        var lineNo = 0;
        /*for (var i = 1; i < rows.length; i++) {
            lineNo = hideOnFilter(rows[i], rows[i].cells.orderCanChange.innerText, lineNo);
            rows[i].cells.itemLineNo.innerText = lineNo;
        }*/
        for (let row of rows) {
            if (row.rowIndex > 0) {
                lineNo = hideOnFilter(row, row.cells.orderCanChange.innerText, lineNo);
                row.cells.itemLineNo.innerText = lineNo;
            }
        }
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
        $("#loading").hide();
    }
}

function orderButtonsConditions() {
    /* подсветка кнопки текущего заказа */
    var obd = document.getElementById("orderButtonsDiv");
    var on = document.getElementById("order.OrderNo").value;
    for (let chld of obd.children) {
        if (chld.innerText == on) {
            chld.classList.add("orderButtonPushed");
            break;
        }
    }
}

function checkARMAccess(task) {
    /* проверка прав доступа по номеру правила */
    let res = false;
    if (CurrentUserARMAccesses)
        for (let armA of CurrentUserARMAccesses) {
            if (armA.T == task)
                res = (armA.V > 0) ? true : false;
        }
    return res;
}

function canForwardInPVZ() {
    /* можно ли продлить срок заказа в ПВЗ*/
    try {
        $.ajax({
            url: '/Order/CanForwardInPVZ',
            data: {
                OrderNo: document.getElementById("order.OrderNo").value,
                Host: document.getElementById("order.Host").value,
                User: document.getElementById("order.CurrentUser").value
            },
            type: 'POST',
            success: function (data) {
                if (data > 0) {
                    let days = 7;
                    if (checkARMAccess(78)) days = 14;
                    document.getElementById("canForvardPVZDiv").style.display = "inline-block";
                    let daysSelect = document.getElementById("forvardPVZDays");
                    let item = document.createElement('option');
                    for (let i = 1; i <= days; i++) {
                        item.text = i;
                        item.value = i;
                        daysSelect.appendChild(item.cloneNode(true));
                    }
                }
            },
            error: function () { alert('Не удалось получить информацию о возможности продления заказа в ПВЗ'); $("#loading").hide(); }
        });
    }
    catch (e) { alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack); }
}

function getCommentFromCustomerTable() {
    /* Получение комментария по клиенту из таблицы Customer */
    let typeCard = null;
    let openForm = document.getElementById("order.OrderForm").value;
    if (openForm == "frmConfirm") typeCard = 0;
    else if (openForm == "frmShipping") typeCard = 2;
    else typeCard = 1;
    try {
        $.ajax({
            url: '/Order/GetCommentFromCustomerTable',
            data: {
                Customer: document.getElementById("order.Customer.ID").value,
                Host: document.getElementById("order.Host").value,
                TypeCard: typeCard
            },
            type: 'POST',
            success: function (data) { document.getElementById("commentFromCustomerTable").value = data; },
            error: function () { alert('Не удалось получить комментарий по клиенту'); $("#loading").hide(); }
        });
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
    }
}

function getFirstContact() {
    try {
        $.ajax({
            url: '/Order/GetFirstContact',
            data: {
                OrderNo: document.getElementById("order.OrderNo").value,
                Host: document.getElementById("order.Host").value,
            },
            type: 'POST',
            success: function (data) { document.getElementById("lblFirstContact").innerText = data; },
            error: function () { alert('Не удалось получить время первого контакта'); $("#loading").hide(); }
        });
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
    }
}

function btnChangeStateClick() {
    document.getElementById("ReloadOrder").value = 1;
    document.getElementById("btn_update").click();
}

function btnChangeShippingAmountClick() {
    /* щелчёк на кнопке смены стоимости доставки*/
    let shipAmountStr = prompt("На какое значение поменять?", document.getElementById("order.Shipping.ShippingAmount").value);
    let shipAmount = parseInt(shipAmountStr);
    if (!isNaN(shipAmount)) {
        document.getElementById("order.Shipping.ShippingAmount").value = shipAmount;
        document.getElementById("btn_update").click();
    }
}

function orderImportantChange(ths) {
    /* щелчёк на чекбоксе смены приоритета заказа*/
    document.getElementById('order.Important').checked = ths.checked;
    document.getElementById('order.Important').value = (ths.checked) ? 1 : 0;
}


//cc_Order_GetMessage
function getOrderMessage() {
    let typeCard = 0;
    let typeCardStr = document.getElementById("order.OrderForm").value;
    if (typeCardStr == "frmShipping") typeCard = 2;
    else if (typeCardStr == "frmConfirm") typeCard = 0;
    else typeCard = 1;
    try {
        $.ajax({
            url: '/Order/GetOrderMessage',
            data: {
                User: document.getElementById("order.CurrentUser").value,
                OrderNo: document.getElementById("order.OrderNo").value,
                Host: document.getElementById("order.Host").value,
                ShipService: document.getElementById("order.Shipping.ShippingService").value,
                TypeCard: typeCard,
                KLADR: document.getElementById("order.Delivery.DeliveryKLADR").value
            },
            type: 'POST',
            success: function (data) { document.getElementById("orderMessage").innerText = data; },
            error: function () { alert('Не удалось получить время первого контакта'); $("#loading").hide(); }
        });
    }
    catch (e) {
        alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
    }
}


///////////////////////////////






















