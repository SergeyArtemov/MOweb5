#pragma checksum "C:\ProjectsCLR\MOweb5\Views\CallCheck\CallCheckGraph.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f34ba92685cc7f0f14bde005ac4d816e543b97dd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_CallCheck_CallCheckGraph), @"mvc.1.0.view", @"/Views/CallCheck/CallCheckGraph.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\ProjectsCLR\MOweb5\Views\_ViewImports.cshtml"
using MOweb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\ProjectsCLR\MOweb5\Views\_ViewImports.cshtml"
using MOweb.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f34ba92685cc7f0f14bde005ac4d816e543b97dd", @"/Views/CallCheck/CallCheckGraph.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b2d30cf7c1d6b26fe04ddad4dd9ba2f82def1db6", @"/Views/_ViewImports.cshtml")]
    public class Views_CallCheck_CallCheckGraph : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("charset", new global::Microsoft.AspNetCore.Html.HtmlString("utf-8"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery-ui.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery.unobtrusive-ajax/jquery.unobtrusive-ajax.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\ProjectsCLR\MOweb5\Views\CallCheck\CallCheckGraph.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("<!--<meta http-equiv=\"REFRESH\" content=\"60;\" />-->\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f34ba92685cc7f0f14bde005ac4d816e543b97dd5045", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f34ba92685cc7f0f14bde005ac4d816e543b97dd5307", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f34ba92685cc7f0f14bde005ac4d816e543b97dd6493", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f34ba92685cc7f0f14bde005ac4d816e543b97dd7679", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f34ba92685cc7f0f14bde005ac4d816e543b97dd9569", async() => {
                WriteLiteral(@"
    <p>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <input type=""button"" onclick=""history.back();"" value=""Назад"" />
        <input hidden id=""t1"" size=""15"" value=""0,0,0,0,0,"">
    </p>

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.bundle.min.js""></script>

    <script type=""text/javascript"" src=""js/stats_tab.js""></script>

    <!-- Готовим контейнер для графика -->
    <div id=""content"" align=""left"">
        <canvas id=""myChart"" width=""870"" height=""500""></canvas>
    </div>

    <script>

        //Загрузка данных и построение графика
        function load_data() {
            try {
            $.ajax({
                url: '/CallCheck/GetDataForGraph',
                type: 'POST',
                success: function (data) {
                    //document.getElementById(""text1"").value = data;
                    var mass1 = data.split(""|"");
                    var warr = [[], [], [], [], [], []];

                    for (var i = 0; i < 6;");
                WriteLiteral(@" i++) {
                        var mass = mass1[i].split("","");
                        for (var j = 0; j < mass.length; j++) {
                            warr[i].push(mass[j]);
                        }
                    }

                    Diagram(warr);

                },
                error: function () { alert('Не удалось получить данные'); }
            });
            }
            catch (e) {
                alert('Ошибка ' + e.name + "":"" + e.message + ""\n"" + e.stack);
            }
            setTimeout(function() {load_data();}, 15000);  //Number(document.getElementById(""iterval"").value)*1000
        }

        //Готовим график
        function Diagram(warr) {
            var ctx = document.getElementById(""myChart"");
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: warr[0], //Подписи оси x
                    datasets: [
                        {
                            label: 'Дл.зв");
                WriteLiteral(@"онка  ',
                            data: warr[1], //Данные
                            borderColor: 'DarkViolet', //Цвет
                            borderWidth: 1, //Толщина линии
                            pointBorderColor: 'transparent',
                            pointBackgroundColor: 'transparent',
                            fill: false,
                        },
                        {
                            label: 'Дл.задачи  ',
                            data: warr[2], //Данные
                            borderColor: 'blue', //Цвет
                            borderWidth: 1, //Толщина линии
                            pointBorderColor: 'transparent',
                            pointBackgroundColor: 'transparent',
                            fill: false //Не заполнять под графиком
                        },
                        {
                            label: '% выполнения  ',
                            data: warr[3], //Данные
                            bor");
                WriteLiteral(@"derColor: 'Green', //Цвет
                            borderWidth: 1, //Толщина линии
                            pointBorderColor: 'transparent',
                            pointBackgroundColor: 'transparent',
                            fill: false //Не заполнять под графиком
                        },
                        {
                            label: 'Max Свободен  ',
                            data: warr[4], //Данные
                            borderColor: 'LightSalmon', //Цвет
                            borderWidth: 1, //Толщина линии
                            pointBorderColor: 'transparent',
                            pointBackgroundColor: 'transparent',
                            fill: false //Не заполнять под графиком
                        },
                        {
                            label: 'Max Ожидание',
                            data: warr[5], //Данные
                            borderColor: 'Red', //Цвет
                            borderWidth");
                WriteLiteral(@": 1, //Толщина линии
                            pointBorderColor: 'transparent',
                            pointBackgroundColor: 'transparent',
                            fill: false //Не заполнять под графиком
                        }
                        //Можно добавить другие графики
                    ]
                },
                options: {
                    legend: {
                        display: true,
                        onClick :
                            function(e, legendItem) {
                                var index = legendItem.datasetIndex;
                                var ci = this.chart;
                                var meta = ci.getDatasetMeta(index);
                                meta.hidden = meta.hidden === null ? 
                                  !ci.data.datasets[index].hidden : null;
                                ci.update();
                                var str = """";
                                for (var i = 0; i < myCh");
                WriteLiteral(@"art.data.datasets.length; i++) {
                                    str = str + (!myChart.isDatasetVisible(i) * 1).toString() + "","";
                                }
                                document.getElementById(""t1"").value = str;
                            }
                    },
                    title: {
                       display: true,
                        text: 'AutoCall Check - графика',
                        fontSize: 20
                    },
                    animation: {
                        duration: 0
                    },
                    //tooltips: {
                    //    enabled: false
                    //  },
                    responsive: false, //Вписывать в размер canvas
                    scales: {
                        xAxes: [{
                            display: true
                        }],
                        yAxes: [{
                            display: true
                        }]
                    ");
                WriteLiteral(@"}
                }
            });
            //myChart.data.datasets[2].hidden = true;
            var str1 = document.getElementById(""t1"").value;
            var arr1 = str1.split("","");
            for (var i = 0; i < myChart.data.datasets.length; i++) {
                if (arr1[i] == 1) myChart.data.datasets[i].hidden = true;
                else myChart.data.datasets[i].hidden = false;
            }
            //Обновляем
            myChart.update();

        }

        //Ставим загрузку диаграммы на событие загрузки страницы
        window.addEventListener(""load"", load_data());
    </script>
    <noscript>
        <div align=""center"">
            Извините, для работы приложения нужен включённый Javascript
        </div>
    </noscript>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
