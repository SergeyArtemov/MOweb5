#pragma checksum "C:\ProjectsCLR\MOweb5\Views\Other\MRPOrderForm.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e9c00eab287a00092a1e3dfac866abee255260d4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Other_MRPOrderForm), @"mvc.1.0.view", @"/Views/Other/MRPOrderForm.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\ProjectsCLR\MOweb5\Views\_ViewImports.cshtml"
using MOweb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\ProjectsCLR\MOweb5\Views\_ViewImports.cshtml"
using MOweb.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e9c00eab287a00092a1e3dfac866abee255260d4", @"/Views/Other/MRPOrderForm.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b2d30cf7c1d6b26fe04ddad4dd9ba2f82def1db6", @"/Views/_ViewImports.cshtml")]
    public class Views_Other_MRPOrderForm : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/common.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("charset", new global::Microsoft.AspNetCore.Html.HtmlString("utf-8"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/commonScript.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/commonScript.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery-ui.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery.unobtrusive-ajax/jquery.unobtrusive-ajax.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\ProjectsCLR\MOweb5\Views\Other\MRPOrderForm.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9c00eab287a00092a1e3dfac866abee255260d46779", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e9c00eab287a00092a1e3dfac866abee255260d47041", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9c00eab287a00092a1e3dfac866abee255260d48306", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9c00eab287a00092a1e3dfac866abee255260d49492", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9c00eab287a00092a1e3dfac866abee255260d410678", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9c00eab287a00092a1e3dfac866abee255260d411865", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9c00eab287a00092a1e3dfac866abee255260d413052", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <title>Заказ MRP</title>
    <style>
        body {
            background-color: deepskyblue;
            padding: 0px;
            margin: 0px;
            font-family: Tahoma, Geneva, sans-serif;
            font-size: 12px;
        }

        .layout {
            display: grid;
            grid-gap: 1px;
            margin: 1px 1px;
            grid-template-rows: 28px 65vh calc(35vh - 32px);
            grid-template-columns: 1fr 1.3fr;
        }

        .box {
            overflow: auto;
            white-space: nowrap;
            background-color: aliceblue;
            border-radius: 1px;
            display: flex;
            justify-content: left;
        }

        .col-head {
            grid-row: 1;
            grid-column: span 2;
            display: block;
            padding: 3px;
        }

        .main-left {
            grid-row: 2;
            grid-column: 1;
        }

        .col-footer {
            grid-row: 3;
            grid-colum");
                WriteLiteral(@"n: 1;
        }

        .right {
            grid-row: span 2;
            grid-column: 2;
        }

        .infoLabel{
            padding: 3px; font-weight: bold; height: 22px; display: table-cell; vertical-align: middle;
        }

        input, select, button {
            background-color: rgba(255, 255, 255, 0.66);
            font-family: Tahoma, Geneva, sans-serif;
            font-size: 12px;
            margin: 0;
            padding: 2px;
            border-radius: 3px;
            box-shadow: none;
            outline: none;
            border: 1px solid rgba(0, 150, 255, 0.3);
        }

        button {
            background-color: lightcyan;
        }

            input:hover, input:focus, select:hover, select:focus, button:hover, button:focus {
                padding: 2px;
                border: 1px solid blue;
            }

        .indicator{
            font-size: 12px; 
            font-weight: bold;
            background-color: green; 
       ");
                WriteLiteral(@"     color: lightcyan;
            margin: 2px;
            padding: 2px;
            overflow: auto;
            border: 2px solid lightseagreen;
            border-radius: 5px;
        }
        .indicator:hover{
            border: 2px solid blue;
            color: antiquewhite;
        }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9c00eab287a00092a1e3dfac866abee255260d417379", async() => {
                WriteLiteral(@"
    <div class=""layout"">
        <div class=""box col-head"">
            <label>Номер заказа<input id=""orderNo"" /><button type=""button"" onclick=""getOrderInfo()"">Вывести информацию</button></label>
            <button type=""button"" style=""float: right;"" onclick=""showWindowPickUpAddFromList()"">Добавить заказы на забор списком</button>
        </div>
        <div id=""mainOrderInfo"" class=""box main-left"" style=""display: inline-block;"">
            <div style=""height: 60%; overflow: auto"">
                <div style=""text-align: right;"" class=""infoLabel""><label style=""padding: 3px; font-weight: bold;"">Общая информация</label></div>
                <div>
                    <table id=""mainOrderInfoTable"" border=""1"" style=""border-collapse: collapse; width: 100%;"" class=""tableleftcolor"">
                    </table>
                </div>
            </div>
            <div style=""height: 40%; overflow: auto"">
                <div style=""text-align: right;"" class=""infoLabel""><label style=""padding: 3px;");
                WriteLiteral(@" font-weight: bold;"">Состав заказа</label></div>
                <div>
                    <table style=""border-collapse: collapse; width: 100%;"" border=""1"" class=""tableleftcolor"">
                        <thead style=""font-weight: bold; background-color:aquamarine"">
                            <tr><td>No.</td><td>Артикул</td><td>Наименование</td><td>Размер</td><td>Кол-во</td><td>Цена</td></tr>
                        </thead>
                        <tbody id=""orderItemsTableBody""></tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class=""box right"" style=""display: inline-block;"">
            <div id=""orderNoHost"" hidden>
                <input id=""inp_orderNo""/>
                <input id=""inp_host"" />
            </div>
            <div style=""background-color: lightblue; text-align: center; padding: 3px;"">
                <div style=""overflow: auto;"">Посмотреть информацию на дату забора<input type=""date"" id=""inp_differenceDate"" /><but");
                WriteLiteral(@"ton onclick=""getMRPRouteRegistryDifference()"">Обновить</button></div>
                <div id=""ind_inRegistryNotRoute"" class=""indicator no-select"" onclick=""showOrdersInRegistryNotRoute()"">Были в реестре, не выгрузились в маршрутизатор</div>
                <div id=""ind_inRouteNotRegistry"" class=""indicator no-select"" onclick=""showOrdersInRouteNotRegistry()"">Выгружены из маршрутизатора, не были в реестре</div>
                <div id=""ind_MRPHungOrdersFromRegistry"" class=""indicator no-select"" onclick=""showMRPConfirmedHungOrdersFromRegistry()"">Были в реестре, до сих пор подтверждены</div>
                <div id=""ind_MRPHungOrdersNotFromRegistry"" class=""indicator no-select"" onclick=""showMRPConfirmedHungOrdersNotFromRegistry()"">Подтверждены, не были в реестре</div>
            </div>
            <div id=""orderHistory"" style=""width: 100%; overflow: auto;""></div>
        </div>
        <div id=""orderItems"" class=""box col-footer"">
            <div style=""width: 100%; height: 100%;"">
                <div st");
                WriteLiteral(@"yle=""width: calc(50% - 2px); height: calc(100% - 2px); display: inline-block; border: 1px solid blue;"">
                    <div class=""infoLabel"">
                        <label>Даты забора</label>
                        <button hidden id=""btn_addPickUpDate"" onclick=""addPickUpDate()"">Добавить</button>
                    </div>
                    <div style=""overflow: auto;"">
                        <table style=""border-collapse: collapse; width: 100%;"" border=""1"" class=""tableleftcolor"">
                            <thead style=""font-weight: bold; background-color:aquamarine"">
                                <tr><td>Дата забора</td><td>Кем добавлено</td><td>Когда добавлено</td></tr>
                            </thead>
                            <tbody id=""orderPickUpDatesTableBody""></tbody>
                        </table>
                    </div>
                </div>
                <div style=""float: right; width: calc(50% - 2px); height: calc(100% - 2px); border: 1px solid blue;"">
 ");
                WriteLiteral(@"                   <div class=""infoLabel"">
                        Даты доставки
                    </div>
                    <div style=""overflow: auto;"">
                        <table style=""border-collapse: collapse; width: 100%;"" border=""1"" class=""tableleftcolor"">
                            <thead style=""font-weight: bold; background-color:aquamarine"">
                                <tr><td>Дата</td><td>Интервал</td></tr>
                            </thead>
                            <tbody id=""orderShippingDatesTableBody""></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- >> MODAL WINDOW with CSS-->
    <input class=""lb_modal__check"" type=""checkbox"" id=""lb_modal"" onchange=""lb_modalChange()"" />
    <div class=""lb_modal no-select"">
        <label class=""lb_modal__closetwo"" for=""lb_modal""></label>
        <div class=""lb_modal__info"">
            <div style=""height: 16px; padding: 3px; ");
                WriteLiteral(@"background-color: cornflowerblue; color: antiquewhite; border-radius: 3px;"" id=""lb_modal_title"">
                <!--MODAL TITLE-->
            </div>
            <div id=""modalBody"" class=""modalBody"" ondblclick=""copyModalBodyInnerText()"">
                <!--MODAL BODY-->             
            </div>
        </div>
    </div>
    <!-- << MODAL WINDOW with CSS-->

    <script>
        var orderInfoJson = null;
        var CurrentUserARMAccesses = null;
        var inRouterNotInRegistryCount = 0;
        var inRegistryNotInRouterCount = 0;
        var inRouterNotInRegistry = null;
        var inRegistryNotInRouter = null;
        var MRPConfirmedHungOrdersFromRegistryCount = 0;
        var MRPConfirmedHungOrdersFromRegistry = null;
        var MRPConfirmedHungOrdersNotFromRegistryCount = 0
        var MRPConfirmedHungOrdersNotFromRegistry = null;
        var lb_modal = document.getElementById(""lb_modal"");
        var modalBody = document.getElementById(""modalBody"");
        var lb_mod");
                WriteLiteral(@"al_title = document.getElementById(""lb_modal_title"");
        document.getElementById(""inp_differenceDate"").value = dateFormat(new Date(), ""yyyy-mm-dd"");
        document.getElementById(""inp_differenceDate"").max = dateFormat(new Date(), ""yyyy-mm-dd"");
        getARMCheckAccess();
        getMRPRouteRegistryDifference();
        getMRPConfirmedHungOrders();
        var timerHungOrders = setInterval(getMRPConfirmedHungOrders, 60000);

        function checkElementsConditionsARMAccessible() {
            /* состояние элементов управления в зависимости от прав доступа*/
            //if (checkARMAccess(65)) document.getElementById(""btn_MRPSheduleForm"").hidden = false;
        }

        function getMRPConfirmedHungOrders() {
            /* Получить список заказов, которые */
            MRPConfirmedHungOrdersFromRegistryCount = 0;
            MRPConfirmedHungOrdersFromRegistry = null;
            let ind_MRPHungOrdersFromRegistry = document.getElementById(""ind_MRPHungOrdersFromRegistry"");
      ");
                WriteLiteral(@"      try {
                $.ajax({
                    url: '/Main/GetMRPConfirmedHungOrders',
                    data: { },
                    type: 'POST',
                    success: function (data) {
                        let hungOrders = JSON.parse(data);
                        let hungOrdersCount = hungOrders.MRPConfirmedHungOrders.length;
                        if (hungOrdersCount > 0) {
                            MRPConfirmedHungOrdersFromRegistryCount = hungOrdersCount;
                            MRPConfirmedHungOrdersFromRegistry = hungOrders.MRPConfirmedHungOrders;
                            ind_MRPHungOrdersFromRegistry.innerText = '' + hungOrdersCount + "" - Были в реестре, до сих пор подтверждены"";
                            ind_MRPHungOrdersFromRegistry.style.backgroundColor = ""lightcoral"";
                        }
                        else {
                            ind_MRPHungOrdersFromRegistry.innerText = '' + 0 + "" - Были в реестре, до сих пор подтверждены""");
                WriteLiteral(@";
                            ind_MRPHungOrdersFromRegistry.style.backgroundColor = ""green"";
                        }

                        hungOrdersCount = hungOrders.MRPConfirmedHungOrders1.length;
                        if (hungOrdersCount > 0) {
                            MRPConfirmedHungOrdersNotFromRegistryCount = hungOrdersCount;
                            MRPConfirmedHungOrdersNotFromRegistry = hungOrders.MRPConfirmedHungOrders1;
                            ind_MRPHungOrdersNotFromRegistry.innerText = '' + hungOrdersCount + "" - Подтверждены, не были в реестре"";
                            ind_MRPHungOrdersNotFromRegistry.style.backgroundColor = ""lightcoral"";
                        }
                        else {
                            ind_MRPHungOrdersNotFromRegistry.innerText = '' + 0 + "" - Подтверждены, не были в реестре"";
                            ind_MRPHungOrdersNotFromRegistry.style.backgroundColor = ""green"";
                        }
                    },
     ");
                WriteLiteral(@"               error: function () { alert('Не удалось получить список зависших заказов'); }
                });
            }
            catch (e) {
                alert('Ошибка ' + e.name + "":"" + e.message + ""\n"" + e.stack);
            }
        }

        function showMRPConfirmedHungOrdersFromRegistry() {
            let mBody = '<table style=""width: 100%; border-collapse: collapse; -moz-user-select: text; user-select: text; -ms-user-select: text;"" class=""tableleftcolor"">';
            lb_modal_title.innerHTML =
                '<b>Были в реестре, до сих пор подтверждены<label style=""font-size: 24px;"" class=""lb_modal__close"" for=""lb_modal""> &times;</label></b>';
            if (MRPConfirmedHungOrdersFromRegistry.length > 0) {
                MRPConfirmedHungOrdersFromRegistry.forEach(function (el) {
                    mBody += ""<tr><td>"" + el.VendorCode + ""</td><td>"" + el.OrderNo + ""</td><td>"" + dateFormat(el.OrderDate, ""yyyy.mm.dd HH.MM.ss"") + ""</td></tr>"";
                });
        ");
                WriteLiteral(@"        modalBody.innerHTML = mBody + ""</table>"";
                lb_modal.click();
            }   
        }

        function showMRPConfirmedHungOrdersNotFromRegistry() {
            let mBody = '<table style=""width: 100%; border-collapse: collapse; -moz-user-select: text; user-select: text; -ms-user-select: text;"" class=""tableleftcolor"">';
            lb_modal_title.innerHTML =
                '<b>Были в реестре, до сих пор подтверждены<label style=""font-size: 24px;"" class=""lb_modal__close"" for=""lb_modal""> &times;</label></b>';
            if (MRPConfirmedHungOrdersNotFromRegistry.length > 0) {
                MRPConfirmedHungOrdersNotFromRegistry.forEach(function (el) {
                    mBody += ""<tr><td>"" + el.VendorCode + ""</td><td>"" + el.OrderNo + ""</td><td>"" + dateFormat(el.OrderDate, ""yyyy.mm.dd HH.MM.ss"") + ""</td></tr>"";
                });
                modalBody.innerHTML = mBody + ""</table>"";
                lb_modal.click();
            }   
        }

        function g");
                WriteLiteral(@"etMRPRouteRegistryDifference() {
            inRouterNotInRegistryCount = 0;
            inRegistryNotInRouterCount = 0;
            inRouterNotInRegistry = null;
            inRegistryNotInRouter = null;
            try {
                $.ajax({
                    url: '/Main/GetMRPRouteRegistryDifference',
                    data: { onDate: document.getElementById(""inp_differenceDate"").value},
                    type: 'POST',
                    success: function (data) {
                        if (data.length < 10) {
                            alert(""Получена некорректная информация о разнице между выгрузкой реестра и маршрутизатора "");
                            return;
                        }
                        let differenceRR = JSON.parse(data);
                        inRouterNotInRegistryCount = differenceRR.MRPRouteRegistryDifference[0].cntInRouteNotInRegistry;
                        inRouterNotInRegistry = differenceRR.MRPRouteRegistryDifference1;
                  ");
                WriteLiteral(@"      inRegistryNotInRouterCount = differenceRR.MRPRouteRegistryDifference2[0].cntInRegistryNotInRoute;
                        inRegistryNotInRouter = differenceRR.MRPRouteRegistryDifference3;
                        if (inRegistryNotInRouterCount > 0)
                            document.getElementById(""ind_inRegistryNotRoute"").style.backgroundColor = ""lightcoral"";
                        else
                            document.getElementById(""ind_inRegistryNotRoute"").style.backgroundColor = ""green"";
                        if (inRouterNotInRegistryCount > 0)
                            document.getElementById(""ind_inRouteNotRegistry"").style.backgroundColor = ""lightcoral"";
                        else
                            document.getElementById(""ind_inRouteNotRegistry"").style.backgroundColor = ""green"";
                        document.getElementById(""ind_inRegistryNotRoute"").innerText = '' + inRegistryNotInRouterCount + ' - Были в реестре, не выгрузились в маршрутизатор';
              ");
                WriteLiteral(@"          document.getElementById(""ind_inRouteNotRegistry"").innerText = '' + inRouterNotInRegistryCount + ' - Выгружены из маршрутизатора, не были в реестре';
                    },
                    error: function () { alert('Не удалось получить информацию о разнице между выгрузкой реестра и маршрутизатора'); }
                });
            }
            catch (e) { alert('Ошибка ' + e.name + "":"" + e.message + ""\n"" + e.stack); }
        }

        function showOrdersInRegistryNotRoute() {
            let mBody = '<table style=""width: 100%; border-collapse: collapse; -moz-user-select: text; user-select: text; -ms-user-select: text;"" class=""tableleftcolor"">';
            lb_modal_title.innerHTML =
                '<b>Были в реестре, не выгрузились в маршрутизатор<label style=""font-size: 24px;"" class=""lb_modal__close"" for=""lb_modal""> &times;</label></b>';
            if (inRegistryNotInRouter.length > 0) {
                inRegistryNotInRouter.forEach(function (el) {
                    mBody");
                WriteLiteral(@" += ""<tr><td>"" + el.VendorCode + ""</td><td>"" + el.RegistryOrder + ""</td><td>"" + el.oState + ""</td></tr>"";
                });
                modalBody.innerHTML = mBody + ""</table>"";
                lb_modal.click();
            }    
        }

        function showOrdersInRouteNotRegistry() {
            let mBody = '<table style=""width: 100%; border-collapse: collapse; -moz-user-select: text; user-select: text; -ms-user-select: text;"" class=""tableleftcolor"">';
            lb_modal_title.innerHTML =
                '<b>Выгружены из маршрутизатора, не были в реестре<label style=""font-size: 24px;"" class=""lb_modal__close"" for=""lb_modal""> &times;</label></b>';
            if (inRouterNotInRegistry.length > 0) {
                inRouterNotInRegistry.forEach(function (el) {
                    mBody += ""<tr><td>"" + el.VendorCode + ""</td><td>"" + el.RouteOrder + ""</td><td>"" + el.oState + ""</td></tr>"";
                });
                modalBody.innerHTML = mBody + ""</table>"";
                lb_m");
                WriteLiteral(@"odal.click();
            }  
        }

        function showWindowPickUpAddFromList() {
            let mBody = '<div style=""width: 100%; height: 100%; text-align: center;"">' +
                '<label>На какую дату</label><input type=""date"" id=""inp_pickUpDateForList"" /><button type=""button"" onclick=""insertPickUpDateForList()"">Добавить</button></br>' +
                '<textarea id=""tar_PUOrderList"" style = ""min-width: 400px; min-height: 300px; resize: none;"" title=""Вносить только номера заказов. \nВ столбик без символов и знаков препинания"">' +
                '</textarea ></br ></div > ';
            lb_modal_title.innerHTML = '<b>Добавление списка заказов на забор<label style=""font-size: 24px;"" class=""lb_modal__close"" for=""lb_modal""> &times;</label></b>';
            modalBody.innerHTML = mBody + """";
            let today = new Date();
            let tomorrow = today.setDate(today.getDate() + 1);
            document.getElementById(""inp_pickUpDateForList"").value = dateFormat(tomorrow, ""yyyy-");
                WriteLiteral(@"mm-dd"");
            document.getElementById(""inp_pickUpDateForList"").min = dateFormat(tomorrow, ""yyyy-mm-dd"");
            lb_modal.click();
        }

        function insertPickUpDateForList() {
            /* логика обработки списка заказов перед добавлением */
            let area = document.getElementById(""tar_PUOrderList"").value;            
            let line = """";
            let pos = 0;
            let start = 0;
            let orderList = """";
            area = area.replace("" "", """");
            if (area.indexOf(""\n"", area.length - 1) != -1)
                area = area.substring(0, area.length - 1);
            while (pos != -1) {
                pos = area.indexOf(""\n"", pos + 1);
                if (pos != -1)
                    line = area.substring(start, pos);
                else
                    line = area.substring(start, area.length);
                if (line != """") {
                    if (!isNaN(parseInt(line)))
                        orderList += line + ");
                WriteLiteral(@""","";
                    else {
                        alert(""Не числовой номер заказа: "" + line);
                        return;
                    }
                }
                start = pos + 1;
            }
            let dt = document.getElementById(""inp_pickUpDateForList"").value;
            if (!isNaN(Date.parse(dt))) {
                if (confirm(""Для заказов будет установлена дата забора: "" + dt))
                    addPickUpDateToBaseForOrderList(orderList, dateFormat(dt, ""yyyymmdd""));
                lb_modal.click();
            }
            else {
                alert(""Дата неверная"");
            }
        }

        function addPickUpDateToBaseForOrderList(orderList, dt) {
            /* добавление даты забора для списка заказов */
            try {
                $.ajax({
                    url: '/Main/AddPickUpDateToBaseForOrderList',
                    data: { orderList: orderList, strDate: dt },
                    type: 'POST',
                    s");
                WriteLiteral(@"uccess: function (str) {
                        if (str.indexOf(""1."") != -1) {
                            if (confirm(""Дата забора была добавлена, кроме заказов: \n"" +str + ""\n Скопировать номера в буфер?"")) {
                                navigator.clipboard.writeText(str);
                            }                                
                        }
                        else
                            alert(str);
                        if (document.getElementById(""orderHistory"").innerText.length > 0)
                            getOrderInfo();
                    },
                    error: function () { alert('Не удалось добавить дату забора'); }
                });
            }
            catch (e) {
                alert('Ошибка ' + e.name + "":"" + e.message + ""\n"" + e.stack);
            }
        }

        function copyModalBodyInnerText() {
            /* если внутри модального окна таблица, то копируем её*/
            if (modalBody.getElementsByTagName(""TA");
                WriteLiteral(@"BLE"").length > 0) {
                navigator.clipboard.writeText(modalBody.getElementsByTagName(""TABLE"")[0].innerText);
                alert(""В буфер скопировано содержимое окна"");
            }
        }

        function getARMCheckAccess() {
            try {
                $.ajax({
                url: '/Main/GetAllARMCheckAccesses',
                    data: {},
                    type: 'POST',
                    success: function (data) {
                        CurrentUserARMAccesses = JSON.parse(data).ArmAccesses;
                        if (CurrentUserARMAccesses) {
                            checkElementsConditionsARMAccessible();
                        }
                    },
                    error: function () { alert('Не удалось получить перечень прав доступа текущего пользователя'); }
                });
            }
            catch (e) { alert('Ошибка ' + e.name + "":"" + e.message + ""\n"" + e.stack); }
        }

        function addPickUpDate() {
          ");
                WriteLiteral(@"  /* добавление даты забора для одного заказа */
            lb_modal_title.innerHTML =
                '<b>' + 'Добавление даты забора для заказа ' + document.getElementById(""inp_orderNo"").value +
                '<label style=""font-size: 24px;"" class=""lb_modal__close"" for=""lb_modal""> &times;</label></b>'
            modalBody.innerHTML = '<div style=""text-align: center; margin: 3px;"">' + 'Выберите дату: ' +
                '<input type=""date"" id=""inp_pickUpDate""/><button type=""button"" id=""btn_insertPickUpDate"" onclick=""insertPickUpDate()"">Добавить дату</button></div>';
            let today = new Date();
            let tomorrow = today.setDate(today.getDate() + 1);
            document.getElementById(""inp_pickUpDate"").value = dateFormat(tomorrow, ""yyyy-mm-dd"");
            document.getElementById(""inp_pickUpDate"").min = dateFormat(tomorrow, ""yyyy-mm-dd"");
            lb_modal.click();
        }

        function insertPickUpDate() {
            /* вставка даты забора для одного заказа*/
    ");
                WriteLiteral(@"        let puDate = document.getElementById(""inp_pickUpDate"").value;
            let orderNo = document.getElementById(""inp_orderNo"").value;
            let host = document.getElementById(""inp_host"").value;
            if (!isNaN(Date.parse(puDate))) {
                if (confirm(""Для заказа "" + orderNo + "" назначить новую дату забора на "" + puDate))
                    addPickUpDateToBase(orderNo, host, dateFormat(puDate, ""yyyymmdd""));
                lb_modal.click();
            }
            else alert(""Неверная дата"");
        }

        function addPickUpDateToBase(OrderNo, Host, strDate) {
            try {
                $.ajax({
                    url: '/Main/AddPickUpDate',
                    data: { OrderNo: OrderNo, Host: Host, strDate: strDate },
                    type: 'POST',
                    success: function (str) {
                        alert(str);
                        getOrderInfo();
                    },
                    error: function () { alert('Не");
                WriteLiteral(@" удалось добавить дату забора'); }
                });
            }
            catch (e) {
                alert('Ошибка ' + e.name + "":"" + e.message + ""\n"" + e.stack);
            }
        }

        function getOrderInfo() {
            /* получение информации о заказе из бд */
            try {
                $.ajax({
                    url: '/Main/GetMRPOrderInfo',
                    data: { orderNo: document.getElementById('orderNo').value },
                    type: 'POST',
                    success: function (html) {
                        if (html.length < 10) {
                            alert(""Информация о заказе не найдена"");
                            return;
                        }
                        let inHtml = """";
                        let str = """";
                        let addStyle = """";
                        orderInfoJson = JSON.parse(html);
                        orderInfoJson.MRP_OrderInfo.forEach(function (element) {
                    ");
                WriteLiteral(@"        addStyle = ' color: black;';
                            if (element.EventDescr.indexOf(""реестр на забор"") != -1) addStyle = ' color: green;';
                            if (element.EventDescr.indexOf(""Выгружен из маршрутизатора"") != -1) addStyle = ' color: blue;';
                            str = dateFormat(element.DateEvent, ""yyyy-mm-dd hh:MM:ss"") + "" - "" + element.EventDescr;
                            inHtml += '<label style=""font-size: 12px;' + addStyle + '"" title=""' + str + '"">' + str + '<label><br/>';
                        });
                        document.getElementById(""orderHistory"").innerHTML = inHtml;

                        let currency = '';
                        if (orderInfoJson.MRP_OrderInfo1.length > 0) {
                            let obj = orderInfoJson.MRP_OrderInfo1[0];
                            currency = obj.Currency;
                            inHtml = ""<tr><td>Заказ</td><td>"" + obj.OrderNo + ""</td></tr>"";
                            inHtml += ""<tr>");
                WriteLiteral(@"<td>Дата заказа</td><td>"" + dateFormat(obj.OrderDate, 'yyyy.mm.dd HH:MM:ss') + ""</td></tr>"";
                            inHtml += ""<tr><td>Поставщик</td><td>"" + obj.Vendor + ""</td></tr>"";
                            inHtml += ""<tr><td>Акция</td><td>"" + obj.Campaign + ""</td></tr>"";
                            inHtml += ""<tr><td>Получатель</td><td>"" + obj.FullName + ""</td></tr>"";
                            inHtml += ""<tr><td>Адрес доставки</td><td>"" + obj.AddrForPrint1 + ""</td></tr>"";
                            inHtml += ""<tr><td>Сумма заказа</td><td>"" + obj.OrderSum + "" "" + currency + ""</td></tr>"";
                            inHtml += ""<tr><td>Агент доставки</td><td>"" + obj.ShippingAgent + ""</td></tr>"";
                            inHtml += ""<tr><td>Сумма доставки</td><td>"" + obj.ShippingAmount + "" "" + currency + ""</td></tr>"";
                            inHtml += ""<tr><td>Текущий статус</td><td>"" + obj.OrderState + ""</td></tr>"";
                            inHtml += ""<tr><td>Доп. комментарий</td>");
                WriteLiteral(@"<td style='color: blue; font-weight: bold'>"" + obj.AddComment + ""</td></tr>"";
                            document.getElementById(""mainOrderInfoTable"").innerHTML = inHtml;
                            document.getElementById(""inp_orderNo"").value = obj.OrderNo;
                            document.getElementById(""inp_host"").value = obj.Host;
                            if (obj.OrderNo > 0 & obj.Host > 0) document.getElementById(""btn_addPickUpDate"").hidden = false;
                        }

                        inHtml = """";
                        if (orderInfoJson.MRP_OrderInfo2.length > 0) {                            
                            orderInfoJson.MRP_OrderInfo2.forEach(function (element) {
                                inHtml += '<tr><td>' + element.LineNo + '</td><td>' + element.CscuName + '</td><td>' +
                                    element.ItemName + '</td><td>' + element.Variant + '</td> <td>' +
                                    element.Quantity + '</td><td>' + elemen");
                WriteLiteral(@"t.PriceInclVat + ' ' + currency + '</td></tr> '
                            });                            
                        }
                        document.getElementById(""orderItemsTableBody"").innerHTML = inHtml;

                        inHtml = """";
                        if (orderInfoJson.MRP_OrderInfo3.length > 0) {                            
                            orderInfoJson.MRP_OrderInfo3.forEach(function (element) {
                                inHtml += '<tr><td>' + element.ShippingDate + '</td><td>' + element.ShippingInterval + '</td></tr>';
                            });                            
                        }
                        document.getElementById(""orderShippingDatesTableBody"").innerHTML = inHtml;

                        inHtml = """";
                        if (orderInfoJson.MRP_OrderInfo4.length > 0) {
                            orderInfoJson.MRP_OrderInfo4.forEach(function (element) {
                                inHtml += '<tr>");
                WriteLiteral(@"<td>' + element.PUDate + '</td><td>' + element.WhoAdd + '</td><td>' + element.WhenAdd + '</td></tr>';
                            });                            
                        }
                        document.getElementById(""orderPickUpDatesTableBody"").innerHTML = inHtml;
                    },
                    error: function () { alert('Сбой получения истории заказа'); }
                });
            }
            catch (e) {
                alert('Ошибка ' + e.name + "":"" + e.message + ""\n"" + e.stack);
            }
        }
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
